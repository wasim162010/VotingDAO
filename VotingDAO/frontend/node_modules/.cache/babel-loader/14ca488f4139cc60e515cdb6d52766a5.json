{"ast":null,"code":"import { ethers } from 'ethers';\nexport const parseBytes = bytesProposal => {\n  console.log(\"parseBytes \", bytesProposal);\n  console.log(\"parseBytes parseBytes32String\", ethers.utils.parseBytes32String(bytesProposal));\n  return ethers.utils.parseBytes32String(bytesProposal);\n};\nexport const parseName = name => {\n  console.log(\"parseName \", name);\n  const newName = name.replace('-', ' ');\n  return newName[0].toUpperCase() + newName.substring(1);\n};","map":{"version":3,"names":["ethers","parseBytes","bytesProposal","console","log","utils","parseBytes32String","parseName","name","newName","replace","toUpperCase","substring"],"sources":["/Users/wasim/temo/ProgPrac/blockchain/vote-system/frontend/src/utils/index.js"],"sourcesContent":["import { ethers } from 'ethers';\n\nexport const parseBytes = (bytesProposal) => {\n\tconsole.log(\"parseBytes \", bytesProposal)\n\tconsole.log(\"parseBytes parseBytes32String\", ethers.utils.parseBytes32String(bytesProposal))\n\treturn ethers.utils.parseBytes32String(bytesProposal);\n};\n\nexport const parseName = (name) => {\n\tconsole.log(\"parseName \", name);\n\tconst newName = name.replace('-', ' ');\n\treturn newName[0].toUpperCase() + newName.substring(1);\n};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAE/B,OAAO,MAAMC,UAAU,GAAIC,aAAa,IAAK;EAC5CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,aAAa,CAAC;EACzCC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEJ,MAAM,CAACK,KAAK,CAACC,kBAAkB,CAACJ,aAAa,CAAC,CAAC;EAC5F,OAAOF,MAAM,CAACK,KAAK,CAACC,kBAAkB,CAACJ,aAAa,CAAC;AACtD,CAAC;AAED,OAAO,MAAMK,SAAS,GAAIC,IAAI,IAAK;EAClCL,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,IAAI,CAAC;EAC/B,MAAMC,OAAO,GAAGD,IAAI,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;EACtC,OAAOD,OAAO,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,GAAGF,OAAO,CAACG,SAAS,CAAC,CAAC,CAAC;AACvD,CAAC"},"metadata":{},"sourceType":"module"}